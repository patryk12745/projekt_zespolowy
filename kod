<div>Rozpoznawanie polskich banknotów</div>
<button type="button" onclick="init()">Start</button>
<div id="webcam-container"></div> <!-- kontenery na obraz z kamery i etykiety--> 
<div id="label-container"></div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // skrypty TensorFlow.js (do uruchamiania modelu uczenia maszynowego)
    //i Teachable Machine (do łatwego ładowania i wykorzystywania modeli.) 
    //ładowane ze źródła CDN

    // link do modelu podany w panelu Teachable Machine
    const URL = "https://teachablemachine.withgoogle.com/models/WjxXAdi1W/";

    let model, webcam, labelContainer, maxPredictions;

    // funkcja init ładuje model i metadane
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // konfiguracja kamery internetowej
        const flip = true; 
        webcam = new tmImage.Webcam(200, 200, flip);
        await webcam.setup(); // dostęp do kamery internetowej
        await webcam.play();
        window.requestAnimationFrame(loop);

        // odwołanie do tmImage.loadFromFiles() w API, aby obsługiwać pliki z selektora plików
        // lub pliki z lokalnego dysku twardego
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    // aktualizuje obraz z kamery i uruchamia przewidywania w pętli.
    async function loop() {
        webcam.update();
        await predict();
        window.requestAnimationFrame(loop);
    }

    // uruchamia obraz z kamery internetowej przez model obrazu
    // przeprowadza przewidywania na podstawie obrazu z kamery.
    // aktualizuje kontener etykiet wynikami przewidywań.
    async function predict() {
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
        }
    }
</script>
